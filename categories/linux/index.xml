<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on lu</title>
    <link>http://localhost:1313/categories/linux/</link>
    <description>Recent content in Linux on lu</description>
    <generator>Hugo -- 0.140.1</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 07 May 2022 10:42:15 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>swap</title>
      <link>http://localhost:1313/posts/linux/swap/</link>
      <pubDate>Sat, 07 May 2022 10:42:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/swap/</guid>
      <description>&lt;p&gt;swap 分区又叫交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。&lt;/p&gt;
&lt;p&gt;操作系统为每个线程都在内存中分配一定的页框，当属于该进程的页框用完时，就会根据页面置换算法将一部分页面替换到交换分区中。&lt;/p&gt;
&lt;p&gt;磁盘被分为两部分，一部分是存储文件的文件分区，一部分是交换分区。文件分区散列存储，交换分区顺序存储，因此交换分区的读写速度快于文件分区。&lt;/p&gt;
&lt;p&gt;当文件第一次加载到内存时，从文件分区加载，之后置换到交换分区再次被加载时直接从交换分区加载。&lt;/p&gt;</description>
    </item>
    <item>
      <title>进程状态</title>
      <link>http://localhost:1313/posts/linux/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</link>
      <pubDate>Sat, 07 May 2022 10:42:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</guid>
      <description>&lt;p&gt;操作系统为每个线程都在内存中分配一定的页框&lt;/p&gt;
&lt;h3 id=&#34;1可运行状态&#34;&gt;1、可运行状态&lt;/h3&gt;
&lt;p&gt;处于运行状态或就绪状态&lt;/p&gt;
&lt;h3 id=&#34;2可中断的阻塞状态&#34;&gt;2、可中断的阻塞状态&lt;/h3&gt;
&lt;p&gt;处于阻塞状态，等待条件满足即可唤醒。同时该状态的进程也会由于接收到信号而提前唤醒。&lt;/p&gt;
&lt;h3 id=&#34;3不可中断的阻塞状态&#34;&gt;3、不可中断的阻塞状态&lt;/h3&gt;
&lt;p&gt;处于阻塞状态，等待条件满足即可唤醒。但该状态的进程对于信号不做任何回应。&lt;/p&gt;
&lt;h3 id=&#34;4暂停状态&#34;&gt;4、暂停状态&lt;/h3&gt;
&lt;p&gt;进程暂时停止，来接收某种特殊处理。&lt;/p&gt;
&lt;h3 id=&#34;5退出状态&#34;&gt;5、退出状态&lt;/h3&gt;
&lt;p&gt;进程退出时会释放掉所有资源，只保留一个&lt;code&gt;task_struct&lt;/code&gt;结构，该结构中保存了进程的&lt;code&gt;pid&lt;/code&gt;和退出码等信息供父进程调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;僵尸进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;正常情况下，子进程退出后，父进程会通过调用 wait 或 waitpid 获取子进程的状态信息，并将子进程释放掉。但是如果父进程没有调用，则子进程的&lt;code&gt;task_struct&lt;/code&gt;就会一直保留在系统中，并占用一个 &lt;code&gt;pid&lt;/code&gt;，此时子进程就是一个僵尸进程。&lt;/p&gt;
&lt;p&gt;僵尸进程过多会导致系统中的 &lt;code&gt;pid&lt;/code&gt;不够用，此时可以杀死父进程，使子进程过继给 &lt;code&gt;init&lt;/code&gt;进程来释放子进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;孤儿进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;父进程退出，但是子进程仍然运行，那么这些子进程就是孤儿进程，孤儿进程会被 &lt;code&gt;init&lt;/code&gt;进程收养。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;init 进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pid为1的进程，又称init进程。 linux系统启动后，第一个被创建的用户态进程就是init进程。它有两项使命：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行系统初始化脚本，创建一系列的进程（它们都是init进程的子孙）；&lt;/li&gt;
&lt;li&gt;在一个死循环中等待其子进程的退出事件，并调用waitid系统调用来完成“收尸”工作；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;init进程不会被暂停、也不会被杀死（这是由内核来保证的）。它在等待子进程退出的过程中处于TASK_INTERRUPTIBLE状态，“收尸”过程中则处于TASK_RUNNING状态。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux基础</title>
      <link>http://localhost:1313/posts/linux/linux%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 28 Apr 2022 14:42:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/linux%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;h3 id=&#34;1binbash&#34;&gt;1、#!/bin/bash&lt;/h3&gt;
&lt;p&gt;shell 脚本第一行的 &lt;code&gt;#!/bin/bash&lt;/code&gt; 用于指定执行该文件的解释器路径，不写默认是 &lt;code&gt;/bin/bash&lt;/code&gt;；也可以执行时手动指定解释器路径，如：&lt;code&gt;/usr/bin/python3 test_py&lt;/code&gt;，手动指定优先级高于文件内第一行指定的优先级。&lt;/p&gt;
&lt;h3 id=&#34;2-binsbinusrsbinusrbin&#34;&gt;2、 /bin；/sbin；/usr/sbin；/usr/bin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/bin&lt;/strong&gt; 存放系统的一些指令。如：ls、chmod、rm、cp、mkdir、su等等&lt;/li&gt;
&lt;li&gt;**/sbin **存放超级用户指令。如：shutdown、halt、init、ifconfig、fdisk等等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr/bin&lt;/strong&gt; 存放用户后期安装的一些软件的运行脚本。如：awk、man、python3、c++、less等等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr/sbin&lt;/strong&gt;  存放一些用户安装的系统命令：如：httpd、netconfig、swap等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3软硬链接&#34;&gt;3、软硬链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;硬链接是指针，所有的硬链接都是指向同一个磁盘块。 删除一个指针不会真正删除文件，只有把所有的指针都删除才会真正删除文件。&lt;/li&gt;
&lt;li&gt;软链接是另外一种类型的文件，保存的是它指向文件的全路径，访问时会替换成绝对路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4查看-cpumem-信息&#34;&gt;4、查看 cpu、mem 信息&lt;/h3&gt;
&lt;p&gt;查看 cpu 信息： &lt;code&gt;cat /proc/cpuinfo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看内存信息：&lt;code&gt;cat /proc/meminfo&lt;/code&gt;；&lt;code&gt;free&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外：&lt;code&gt;top&lt;/code&gt;命令动态显示进程信息，其中也包含 cpu 和 mem 的使用情况。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IO 多路复用</title>
      <link>http://localhost:1313/posts/linux/io/</link>
      <pubDate>Sat, 09 Apr 2022 19:42:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/io/</guid>
      <description>&lt;h2 id=&#34;1概念&#34;&gt;1、概念&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;IO多路复用&lt;/strong&gt;是一种同步IO模型，实现一个线程可以监视多个文件描述符；一旦某个文件描述符就绪，就能够通知应用程序进行相应的读写操作；没有文件描述符就绪时会阻塞应用程序，交出cpu。多路是指网络连接，复用指的是同一个线程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143847169&#34;&gt;文件描述符&lt;/a&gt;&lt;/strong&gt;：Linux 中一切都可以看作文件，包括普通文件、链接文件、Socket  以及设备驱动等，对其进行相关操作时，都可能会创建对应的文件描述符。文件描述符（file  descriptor）是内核为了高效管理已被打开的文件所创建的索引，用于指代被打开的文件，对文件所有 I/O  操作相关的系统调用都需要通过文件描述符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/234806787&#34;&gt;Socket&lt;/a&gt;&lt;/strong&gt;：在Linux 中，Socket 也是文件，发送端将数据写进发送方的 Socket ，再通过网卡、路由到接收方的 Socket ，接收方程序将数据从接收方 Socket 中读出来使用。一个 Socket 由&amp;lt;协议、发送方 IP、发送方 Port、接收方 IP、接收方 Port&amp;gt; 五元组描述。总之，Socket 就是一个文件，同样可以进行读写。&lt;/p&gt;
&lt;h2 id=&#34;2linux-io模型&#34;&gt;2、Linux IO模型&lt;/h2&gt;
&lt;p&gt;目前Linux系统中提供了5种IO处理模型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阻塞IO&lt;/li&gt;
&lt;li&gt;非阻塞IO&lt;/li&gt;
&lt;li&gt;IO多路复用&lt;/li&gt;
&lt;li&gt;信号驱动IO&lt;/li&gt;
&lt;li&gt;异步IO&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;阻塞io&#34;&gt;阻塞IO&lt;/h4&gt;
&lt;p&gt;阻塞IO意味着当我们发起一次IO操作后一直等待成功或失败之后才返回，在这期间程序不能做其它的事情。阻塞IO操作只能对单个文件描述符进行操作，如果文件描述符不就绪就阻塞。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端采用单线程，当accept一个请求后，在recv或send调用阻塞时，将无法accept其他请求（必须等上一个请求处recv或send完），无法处理并发。&lt;/li&gt;
&lt;li&gt;服务器端采用多线程，当accept一个请求后，开启线程进行recv，可以完成并发处理，但随着请求数增加需要增加系统线程，大量的线程占用很大的内存空间，并且线程切换会带来很大的开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;非阻塞io&#34;&gt;非阻塞IO&lt;/h4&gt;
&lt;p&gt;服务器端当accept一个请求后，加入fds集合，每次轮询一遍fds，若IO失败则返回错误，每次轮询所有fd（包括没有发生读写事件的fd）会很浪费cpu&lt;/p&gt;
&lt;h4 id=&#34;io多路复用&#34;&gt;IO多路复用&lt;/h4&gt;
&lt;p&gt;个人认为IO多路复用是吸收了阻塞IO和非阻塞IO的优点的一种IO方式，即同时可以对多个请求进行处理，但当所有请求不就绪时会阻塞，不占用CPU资源。&lt;/p&gt;
&lt;p&gt;服务器端采用单线程通过select/epoll等系统调用获取fd列表，遍历活跃（即有读写事件）的fd进行accept/recv/send，使其能支持更多的并发连接请求。&lt;/p&gt;
&lt;h2 id=&#34;3io多路复用的实现&#34;&gt;3、IO多路复用的实现&lt;/h2&gt;
&lt;h3 id=&#34;31select&#34;&gt;3.1、select&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;select 每个进程可同时监听的文件描述符数量最大为 1024，虽然可以设置，但是会降低网络效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对socket扫描时是线性扫描，采用轮询的方法，效率较低（高并发时）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面的不重要&lt;/p&gt;
&lt;p&gt;数据结构：&lt;code&gt;fd_set&lt;/code&gt;简单地理解为一个长度是1024的比特位，每个比特位表示一个需要处理的FD，如果是1，那么表示这个FD有需要处理的I/O事件，否则没有。&lt;/p&gt;
&lt;p&gt;select 在调用期间会一直阻塞。&lt;/p&gt;
&lt;p&gt;select将监听的文件描述符分为三组，分别是：read_fds是需要进行读操作的文件描述符，write_fds是需要进行写操作的文件描述符，except_fds是需要进行异常事件处理的文件描述符。&lt;/p&gt;
&lt;h3 id=&#34;32poll&#34;&gt;3.2、poll&lt;/h3&gt;
&lt;p&gt;poll 仅仅时取消了 1024 的限制，其他和 select 一样，不分为三组。poll 是 fd 数组。&lt;/p&gt;
&lt;h3 id=&#34;33epoll&#34;&gt;3.3、epoll&lt;/h3&gt;
&lt;p&gt;epoll 底层是红黑树 + 链表。红黑树存储所有需要监听的 fd（文件描述符），链表存储活跃（有读写事件）的fd。&lt;/p&gt;</description>
    </item>
    <item>
      <title>linux创建子进程--fork()方法</title>
      <link>http://localhost:1313/posts/linux/linux%E5%88%9B%E5%BB%BA%E5%AD%90%E8%BF%9B%E7%A8%8B--fork%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 09 Apr 2022 19:42:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/linux%E5%88%9B%E5%BB%BA%E5%AD%90%E8%BF%9B%E7%A8%8B--fork%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h3 id=&#34;1fork的定义&#34;&gt;1、fork()的定义&lt;/h3&gt;
&lt;p&gt;fork()函数是Unix中派生新进程的唯一方法，子进程和父进程独立运行互不干扰。&lt;/p&gt;
&lt;p&gt;声明如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用一次fork()方法，该方法会返回两次。一次是在父进程中返回一次，返回值是新派生的进程的进程ID。一次是在子进程中返回，返回值是0，代表当前进程为子进程。如果返回值为-1的话，则代表在派生新进程的过程中出错。&lt;/p&gt;
&lt;p&gt;那么在程序中，我们就可以根据此返回值来判断当前进程是父进程还是子进程，来实现一些具体的操作。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; pid;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// TODO: 在子进程中实现具体操作  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// ...  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 结束子进程  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// TODO: 在调用进程(父进程)实现具体操作  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2getpid和getppid函数&#34;&gt;2、getpid和getppid函数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   pid_t &lt;span style=&#34;color:#a6e22e&#34;&gt;getpid&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 获取当前进程的pid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   pid_t &lt;span style=&#34;color:#a6e22e&#34;&gt;getppid&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 获取当前进程父进程的pid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3fork-原理&#34;&gt;3、fork() 原理&lt;/h3&gt;
&lt;p&gt;父进程中在调用fork()派生新进程，实际上相当于创建了进程的一个拷贝；即在fork()之前的进程拥有的资源会被复制到新的进程中去。&lt;/p&gt;
&lt;p&gt;​		（1）进程不同于程序是动态运行在内存中的实体，占用系统资源（CPU、内存等），而程序则是存放在磁盘中的静态的资源，占用磁盘空间而不占用系统资源。进程在内存中运行，由CPU分配资源。&lt;/p&gt;
&lt;p&gt;　　（2）与进程相关的两个内存：虚拟内存和物理内存。所谓虚拟内存就是我们程序员视角下的内存，比如int a = 10; &amp;amp;a 所得的值就是虚拟内存，是给我们程序员看的连续的地址空间。（当我们在代码中连续定义几个local object时，通过&amp;amp;可以观察到它们的地址是连续的）相对的，物理内存才是实实在在的存在于计算机硬件中的内存（比如买内存条时我们可以参考的4G、8G等容量参数），当执行 a = 20这条语句时，操作系统就会将 a 的虚拟地址送入 CPU的地址转换单元（MMU），如果a还没有实际的物理单元，则为a分配物理内存，写入20，反之直接将20写入a物理内存单元。&lt;/p&gt;
&lt;p&gt;　　（3）为什么会有虚拟内存？ 虚拟内存的产生源自物理内存的稀缺，买过SSD或者内存条的伙伴都知道，250G的SSD也就是250块左右，而仅仅8G的内存条就要250块，内存的小容量与高价格的反差促使猿们必须节省内存的开销。由此产生了虚拟内存技术，32位系统下，CPU会为每个进程分配4G的虚拟地址单元（地址编号为0-4G），分为用户空间（通常为0-3G）和内核（kernel）空间（3-4G），用户空间存放该进程的堆栈变量、全局变量等，kernel里存放该进程的进程控制块（&lt;strong&gt;PCB，唯一区分每一个进程&lt;/strong&gt;）。虚拟内存单元只有在被进程访问后才会映射为物理内存单元（见（2）a=20的执行过程）。&lt;/p&gt;
&lt;p&gt;　　（4）内存使用的一大机制（虚拟内存能实现的原因）：缺页中断（见文章最后）。&lt;/p&gt;
&lt;p&gt;　　3. fork()是如何产生子进程的？ 上面说了每一个进程都有自己0-4G的虚拟地址空间，因此，fork所做的动作就是在当前进程的基础上产生一个新进程：&lt;strong&gt;（1）复制父进程的0-3G的用户空间（2）创建新进程（子进程）的PCB&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看一个例子吧：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//global variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; globalVar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pid_t pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getpid();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fork();   &lt;span style=&#34;color:#75715e&#34;&gt;// 循环生成5个子进程
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pid){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            perror(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FORK&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 由于fork()返回两个值，该分支一定会被子进程执行，即每子进程都会跳出循环去执行下方代码，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 而父进程一直执行到循环结束，故每个子进程都会执行下方的if(i &amp;lt; 5)，而父进程执行else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 所以下方图片输出可表明每个子进程写时都复制父进程的变量再修改，且不影响其他进程。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; pid){  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sleep(i); &lt;span style=&#34;color:#75715e&#34;&gt;// 保证父进程最后退出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k;  &lt;span style=&#34;color:#75715e&#34;&gt;// 写时复制
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;globalVar; &lt;span style=&#34;color:#75715e&#34;&gt;//写时复制
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m %dth child, pid = %d, parent is %d, k = %d, globalVar = %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, i, getpid(), getppid(), k, globalVar);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;globalVar;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#39;m parent, pid = %d, k = %d, globalVar = %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, getpid(), k, globalVar);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img alt=&#34;img&#34; loading=&#34;lazy&#34; src=&#34;https://img2020.cnblogs.com/blog/1696980/202007/1696980-20200715102950625-1441570329.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ubuntu的ufw与iptables</title>
      <link>http://localhost:1313/posts/linux/ubuntu%E7%9A%84ufw%E4%B8%8Eiptables/</link>
      <pubDate>Thu, 07 Apr 2022 14:42:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/ubuntu%E7%9A%84ufw%E4%B8%8Eiptables/</guid>
      <description>&lt;h2 id=&#34;1概述&#34;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;进出计算机的流量通过“端口”进行过滤，“端口”是附加到特定应用程序使用的流量数据包的相对任意名称。&lt;/p&gt;
&lt;p&gt;按照惯例，某些端口通常用于特定类型的应用程序。例如，端口 80 通常用于不安全的 Web 浏览，端口 443 用于安全的 Web 浏览。&lt;/p&gt;
&lt;p&gt;可以通过“打开”或“关闭”（即过滤）为特定类型的流量指定的端口来允许或阻止到特定应用程序的流量。例如，如果端口 80 “关闭”，则无法进行（不安全的）网页浏览。&lt;/p&gt;
&lt;p&gt;Linux 内核包括 netfilter 子系统，用于操纵或决定进入或通过计算机的网络流量的命运。所有现代 Linux 防火墙解决方案都使用该系统进行数据包过滤。&lt;/p&gt;
&lt;p&gt;如果没有用户界面来管理内核的数据包过滤系统，那么用户或管理员几乎没有什么用处。这就是 iptables 的目的。当一个数据包到达您的计算机时，它会根据通过 iptables 提供给它的规则传递给 netfilter 子系统接受、处理或拒绝。因此，iptables 是您管理防火墙所需的一切（如果您熟悉它）。然而，许多前端可用于简化任务。&lt;/p&gt;
&lt;p&gt;因此，用户可以配置防火墙以允许某些类型的网络流量进出系统（例如 SSH 或 Web 服务器流量）。这是通过在防火墙中打开和关闭 TCP 和 UDP“端口”来完成的。此外，防火墙可以配置为允许或限制对特定 IP 地址（或 IP 地址范围）的访问。&lt;/p&gt;
&lt;h2 id=&#34;2端口映射与端口转发&#34;&gt;2、端口映射与端口转发&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;端口映射&lt;/strong&gt;：端口映射就是将内网中的主机的一个端口映射到外网主机的一个端口，提供相应的服务。当用户访问外网IP的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。&lt;/p&gt;
&lt;p&gt;我们在内网中有一台Web服务器，但是外网中的用户是没有办法直接访问该服务器的。于是我们可以在路由器上设置一个端口映射，只要外网用户访问路由器ip的80端口，那么路由器会把自动把流量转到内网Web服务器的80端口上。并且，在路由器上还存在一个Session，当内网服务器返回数据给路由器时，路由器能准确的将消息发送给外网请求用户的主机。在这过程中，路由器充当了一个反向代理的作用，他保护了内网中主机的安全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;端口转发&lt;/strong&gt;：端口转发（Port forwarding），有时被叫做隧道，是安全壳（SSH） 为网络安全通信使用的一种方法。&lt;/p&gt;
&lt;p&gt;比如，我们现在在内网中，是没有办法直接访问外网的。但是我们可以通过路由器的NAT方式访问外网。假如我们内网现在有100台主机，那么我们现在都是通过路由器的这一个公网IP和外网通信的。那么，当互联网上的消息发送回来时，路由器是怎么知道这个消息是给他的，而另外消息是给你的呢？这就要我们的ip地址和路由器的端口进行绑定了，这时，在路由器中就会有一个内网ip和路由器端口对应的一张表。当路由器的10000端口收到消息时，就知道把消息发送给他，而当20000端口收到消息时，就知道把消息发送给你。这就是端口转发，其转发一个端口收到的流量，给另一个主机。&lt;/p&gt;
&lt;p&gt;端口转发：转发的重点在“转”上面。送快递的过来，把所有快递都交给门口保安，保安再根据每件快递上的收件人来分发。&lt;/p&gt;
&lt;p&gt;端口映射：就是在大门口给每个人装个柜子，送快递的直接按收件人名字，把快递放到对应的柜子里面。&lt;/p&gt;
&lt;h2 id=&#34;3ufw与iptables&#34;&gt;3、ufw与iptables&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;iptables&lt;/strong&gt; 是防火墙规则的数据库，是 Linux 系统中实际使用的防火墙。 Linux系统中配置iptables的传统界面是命令行界面终端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UFW&lt;/strong&gt;（简单防火墙）是 iptables 的前端，是Ubuntu系统上配置iptables防火墙的工具，特别适合基于主机的防火墙。 UFW 是专门为 Ubuntu 开发的（但在其他发行版中可用），也可以从终端进行配置。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
