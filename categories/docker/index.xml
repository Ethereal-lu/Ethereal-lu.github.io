<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on lu</title>
    <link>https://ethereal-lu.github.io/categories/docker/</link>
    <description>Recent content in Docker on lu</description>
    <generator>Hugo -- 0.140.1</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 17 Mar 2022 17:12:41 +0000</lastBuildDate>
    <atom:link href="https://ethereal-lu.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker基础</title>
      <link>https://ethereal-lu.github.io/posts/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%AE%B9%E5%99%A8/docker/docker%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 17 Mar 2022 17:12:41 +0000</pubDate>
      <guid>https://ethereal-lu.github.io/posts/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%AE%B9%E5%99%A8/docker/docker%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;1概述&#34;&gt;1、概述&lt;/h2&gt;
&lt;p&gt;Docker 基于 Go 语言实现。一次镜像，处处运行。&lt;/p&gt;
&lt;p&gt;Go文件编译后是平台级别的机器码，因此Docker 不需要 Go 环境支撑。由于 Docker 容器模型是基于 linux 内核的，因此 Docker 必须安装在 linux 环境上。&lt;/p&gt;
&lt;p&gt;Docker for Windows 中负责运行环境配置的工具是 Docker Machine。它会在 Windows 上创建一个 Linux 虚拟机，用于运行 Docker 引擎。&lt;/p&gt;
&lt;p&gt;Docker 相关的本地资源都存放在&lt;code&gt;/var/lib/docker/&lt;/code&gt;目录下&lt;/p&gt;
&lt;p&gt;docker 的配置文件路劲：&lt;code&gt;/etc/default/docker&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;11lcx&#34;&gt;1.1、LCX&lt;/h3&gt;
&lt;p&gt;Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。&lt;/p&gt;
&lt;p&gt;LXC与docker的关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker并不是LXC的替代品，Docker的底层就是使用了LXC来实现的。LXC将Linux进程沙盒化，使得进程之间相互隔离，并且能够控制各进程的资源分配。&lt;/li&gt;
&lt;li&gt;在LXC的基础之上，Docker提供了一系列更强的功能。
&lt;ul&gt;
&lt;li&gt;移植性：通过抽象容器配置，容器可以实现一个平台移植到另一个平台；&lt;/li&gt;
&lt;li&gt;镜像系统：基于 AUFS 的镜像系统为容器的分发带来了很多的便利，同时共同的 镜像层只需要存储一份，实现高效率的存储；&lt;/li&gt;
&lt;li&gt;版本管理：类似于 GIT 的版本管理理念，用户可以更方面的创建、管理镜像文件；&lt;/li&gt;
&lt;li&gt;仓库系统：仓库系统大大降低了镜像的分发和管理的成本；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12docker-启动为什么比虚拟机快&#34;&gt;1.2、docker 启动为什么比虚拟机快&lt;/h3&gt;
&lt;p&gt;1.Docker有着比虚拟机更少的抽象层，由于Docker不需要Hypervisor实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在Cpu、内存利用率上Docker将会在效率上有明显优势。&lt;/p&gt;
&lt;p&gt;2.Docker利用的是宿主机的内核，而不需要Guest OS，因此，当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统，避免了引导、加载操作系统内核这个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的，而Docker由于直接利用宿主机的操作系统则省略了这个过程，因此新建一个Docker容器只需要几秒钟。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;Docker容器&lt;/th&gt;
          &lt;th&gt;虚拟机（VM）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;操作系统&lt;/td&gt;
          &lt;td&gt;与宿主机共享OS&lt;/td&gt;
          &lt;td&gt;宿主机OS上运行宿主机OS&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;存储大小&lt;/td&gt;
          &lt;td&gt;镜像小，便于存储与传输&lt;/td&gt;
          &lt;td&gt;镜像庞大（vmdk等）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;运行性能&lt;/td&gt;
          &lt;td&gt;几乎无额外性能损失&lt;/td&gt;
          &lt;td&gt;操作系统额外的cpu、内存消耗&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;移植性&lt;/td&gt;
          &lt;td&gt;轻便、灵活、适用于Linux&lt;/td&gt;
          &lt;td&gt;笨重、与虚拟化技术耦合度高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;硬件亲和性&lt;/td&gt;
          &lt;td&gt;面向软件开发者&lt;/td&gt;
          &lt;td&gt;面向硬件运维者&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;2基本组成&#34;&gt;2、基本组成&lt;/h2&gt;
&lt;p&gt;docker 的三要素是：镜像、容器、仓库。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
