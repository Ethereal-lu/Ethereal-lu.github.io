<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>面经 on lu</title>
    <link>https://ethereal-lu.github.io/categories/%E9%9D%A2%E7%BB%8F/</link>
    <description>Recent content in 面经 on lu</description>
    <generator>Hugo -- 0.140.1</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 11 Jul 2022 11:12:41 +0000</lastBuildDate>
    <atom:link href="https://ethereal-lu.github.io/categories/%E9%9D%A2%E7%BB%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>山西建行暑期实习面经</title>
      <link>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E5%B1%B1%E8%A5%BF%E5%BB%BA%E8%A1%8C%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Mon, 11 Jul 2022 11:12:41 +0000</pubDate>
      <guid>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E5%B1%B1%E8%A5%BF%E5%BB%BA%E8%A1%8C%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;p&gt;1、工作中遇到问题时，如何将损失降到最低&lt;/p&gt;
&lt;p&gt;2、未来在你的专业上如何发展&lt;/p&gt;
&lt;p&gt;3、你擅长的研究领域是哪些&lt;/p&gt;</description>
    </item>
    <item>
      <title>其他面经</title>
      <link>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E5%85%B6%E4%BB%96%E9%9D%A2%E7%BB%8F/</link>
      <pubDate>Tue, 26 Apr 2022 11:12:41 +0000</pubDate>
      <guid>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E5%85%B6%E4%BB%96%E9%9D%A2%E7%BB%8F/</guid>
      <description>&lt;h1 id=&#34;字节&#34;&gt;字节&lt;/h1&gt;
&lt;h2 id=&#34;一面&#34;&gt;一面&lt;/h2&gt;
&lt;p&gt;http1.1 与 http 2.0 区别？&lt;/p&gt;
&lt;p&gt;tcp 三次握手&lt;/p&gt;
&lt;p&gt;状态码 500  503&lt;/p&gt;
&lt;p&gt;进程、线程、协程&lt;/p&gt;
&lt;p&gt;进程通信&lt;/p&gt;
&lt;p&gt;信号&lt;/p&gt;
&lt;p&gt;kill -9   -15&lt;/p&gt;
&lt;p&gt;bio、nio、aio&lt;/p&gt;
&lt;p&gt;多路复用&lt;/p&gt;
&lt;p&gt;两个栈？&lt;/p&gt;
&lt;p&gt;utf-8  varchar int bigint&lt;/p&gt;
&lt;p&gt;b树  b+树&lt;/p&gt;
&lt;p&gt;聚集索引&lt;/p&gt;
&lt;p&gt;主键索引&lt;/p&gt;
&lt;p&gt;手写 SQL？  join&lt;/p&gt;
&lt;p&gt;编程：三数之和？&lt;/p&gt;
&lt;h2 id=&#34;二面&#34;&gt;二面&lt;/h2&gt;
&lt;p&gt;unicode 和 ascii&lt;/p&gt;
&lt;p&gt;死锁及避免&lt;/p&gt;
&lt;p&gt;栈和堆&lt;/p&gt;
&lt;p&gt;json&lt;/p&gt;
&lt;p&gt;RPC&lt;/p&gt;
&lt;p&gt;子网掩码&lt;/p&gt;
&lt;p&gt;syn洪范攻击&lt;/p&gt;
&lt;p&gt;dns劫持、避免&lt;/p&gt;
&lt;p&gt;http 状态码&lt;/p&gt;
&lt;p&gt;断点续传&lt;/p&gt;
&lt;p&gt;手写sql   update table set name=“zhangsan” where id &amp;gt; 3&lt;/p&gt;
&lt;p&gt;泛型&lt;/p&gt;
&lt;p&gt;容器类&lt;/p&gt;
&lt;p&gt;treeMap&lt;/p&gt;
&lt;p&gt;斐波那契dp？&lt;/p&gt;
&lt;p&gt;链表题&lt;/p&gt;
&lt;h2 id=&#34;三&#34;&gt;三&lt;/h2&gt;
&lt;p&gt;虚拟内存&lt;/p&gt;
&lt;p&gt;死锁、避免&lt;/p&gt;
&lt;p&gt;linux 基础命令介绍&lt;/p&gt;
&lt;p&gt;状态码介绍。细问，全记。&lt;/p&gt;
&lt;p&gt;cooike sesson&lt;/p&gt;
&lt;p&gt;docker 细问&lt;/p&gt;</description>
    </item>
    <item>
      <title>面经碎知识汇总</title>
      <link>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 05 Apr 2022 21:12:41 +0000</pubDate>
      <guid>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h2 id=&#34;1大文件上传&#34;&gt;1、大文件上传&lt;/h2&gt;
&lt;p&gt;每个分块的文件内容都是通过 MultipartFile 来接收的，改接口的所有实现类都是通过包装 HttpServletRequest 来实现的，故该文件传输是通过 HTTP 协议实现的。&lt;/p&gt;
&lt;h3 id=&#34;11分片上传&#34;&gt;1.1、分片上传&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;先获取完整文件的 MD5 值，之后将文件分割成相同大小的数据块；&lt;/li&gt;
&lt;li&gt;每次上传文件时都携带上 MD5 值、分块序号、文件内容等。&lt;/li&gt;
&lt;li&gt;每收到一个分块，便将其存储到文件中，并将分块序号添加到 redis 中。&lt;/li&gt;
&lt;li&gt;分块全部上传完成后，将所有分块合成一个完整文件，并将各分块删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12断点续传&#34;&gt;1.2、断点续传&lt;/h3&gt;
&lt;p&gt;上传之前先访问一个用于检查的接口来检查已经上传了哪些分块，该接口会将 redis 中的已经上传的分块的序号返回给前端，前端只需根据该结果从未上传的分块开始上传即可实现断点续传。&lt;/p&gt;
&lt;h2 id=&#34;2线程抛异常&#34;&gt;2、线程抛异常&lt;/h2&gt;
&lt;h3 id=&#34;21普通线程&#34;&gt;2.1、普通线程&lt;/h3&gt;
&lt;p&gt;一个普通线程在运行过程中出现了异常有以下两种场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果该异常被捕获或抛出，则程序继续运行。&lt;/li&gt;
&lt;li&gt;如果异常没有被捕获该线程将会停止执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候JVM会使用Thread.getUncaughtExceptionHandler()来查询线程的UncaughtExceptionHandler，并将线程和异常作为参数传递给该handler的uncaughtException()方法进行处理。因此，可以继承ThreadGroup类并重写其uncaughtException方法来处理异常。&lt;/p&gt;
&lt;h3 id=&#34;22线程池中的线程&#34;&gt;2.2、线程池中的线程&lt;/h3&gt;
&lt;p&gt;线程池中的某个线程在运行过程中出现了异常有以下场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若线程被execute方法执行，则在线程出现异常时会将异常输出在控制台，若线程被submit方法执行，则线程出现异常时不会在控制台输出，必须调用Future.get()方法时，才会输出异常。&lt;/li&gt;
&lt;li&gt;一个线程出现异常不会影响线程池里面其他线程的正常执行。&lt;/li&gt;
&lt;li&gt;线程出现异常不是被回收而是线程池把这个线程移除掉，同时创建一个新的线程放到线程池中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;submit 内部调用了 execute，为何还有这种区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为 submit 方法会将任务封装为 FutureTask （FutureTask 会将 Runnable 通过适配器转为 Callable），而 FutureTask 会捕获线程运行中的异常，将其存储在线程结果信息中，当调用 get 方法时判断线程运行结果状态，有异常就抛出存储的异常信息，因此submit运行异常我们只能用get方法来拿到。&lt;/p&gt;
&lt;h2 id=&#34;3tcp-有什么值得改进的地方&#34;&gt;3、TCP 有什么值得改进的地方&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP是基于四元组的（源IP，目的IP，源端口，目的端口），如果使用中途网络切换了或者连接超时重连后IP换了，那么四元组就改变了，就需要重新发起三次握手连接，所以此处值得改进&lt;/li&gt;
&lt;li&gt;TCP保证有序性，如果响应队列中队头的报文没有返回，那么后续报文就会被阻塞。尽管HTTP1.1可以通过Pipelining在一条TCP连接中发送多次HTTP请求，以及HTTP2.0采用多路复用将请求拆分为多个帧传输，但是由于底层使用的还是TCP，因此还存在队头的帧没有传输后续帧被阻塞的情况。因此此处值得改进&lt;/li&gt;
&lt;li&gt;TCP 的拥塞控制算法是在丢包之后才开始降低传输速度，而Google 的 BBR 拥塞控制算法是通过主动探测网络带宽和RTT来避免丢包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拥塞控制通过BBR改善，前两点可以通过QUIC协议改善。&lt;/p&gt;
&lt;p&gt;QUIC（Quick UDP Internet Connection）是谷歌制定的一种基于UDP的低时延的传输层协议。&lt;/p&gt;
&lt;p&gt;QUIC 在 UDP 的基础上融合了 TCP、TSL、HTTP2.0的协议的特性，使其既有低的连接时延，又有高的安全性。&lt;/p&gt;
&lt;p&gt;客户端第一次连接服务器时，QUIC只需要1RTT（Round-Trip Time）的延迟就可以建立可靠安全的连接，之后客户端可以在本地缓存加密的认证信息，再次与服务器建立连接时可以实现0-RTT的连接建立延迟。QUIC同时复用了HTTP/2协议的多路复用功能，而且由于QUIC基于UDP所以避免了HTTP/2的队头阻塞。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面经-美团</title>
      <link>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E7%BB%8F-%E7%BE%8E%E5%9B%A2/</link>
      <pubDate>Sat, 26 Mar 2022 11:12:41 +0000</pubDate>
      <guid>https://ethereal-lu.github.io/posts/%E9%9D%A2%E7%BB%8F/%E9%9D%A2%E7%BB%8F-%E7%BE%8E%E5%9B%A2/</guid>
      <description>&lt;h2 id=&#34;实习一面75min---421&#34;&gt;实习一面：75min   4.21&lt;/h2&gt;
&lt;p&gt;1、自我介绍&lt;/p&gt;
&lt;p&gt;2、项目中用户权限控制的数据表设计问题&lt;/p&gt;
&lt;p&gt;3、如果有 100 个元素，且之后不会增加，存储在 hashmap 中，初始容量应该设置为多少？&lt;/p&gt;
&lt;p&gt;答：64？ 100？  128？ 瞎蒙&lt;/p&gt;
&lt;p&gt;正确：为了不触发扩容操作，初始值应该设置为 129 到 256 的任意一个值；因为在 hashmap 的构造函数中，会将输入的初始容量转换为第一个大于等于它的 2 的幂次值并赋值给 threshold ，而在 put 操作中，会将该 threshold 赋值给 capacity ，并根据 &lt;code&gt;capacity * loadfactory&lt;/code&gt;得到新 threshold 。因此，如果初始值设置为小于等于 128，则经过 put 操作后，threshold 会变为 96，小于 100，如此一定会触发扩容操作。故为了不触发扩容需保证初始容量为 256。&lt;/p&gt;
&lt;p&gt;4、如果有 41 个 int 数字，另外再给一个数字，如何判断这个数字在不在之前的 41 中？（后续准备八股文才反应过来，应该是40亿吧）&lt;/p&gt;
&lt;p&gt;答：hashset 或 布隆过滤器，瞎蒙。布隆过滤器存在误差。&lt;/p&gt;
&lt;p&gt;应该使用位图。由于 2^32 大约42亿多，故可以申请 2^32 个 bit，每个数对应一个bit，若有值该bit位为1，否则为0；如若 1 在，则第一个 bit 位置为 1，若17在，则第17个 bit 位置为 1。这样判断一个值在不在时只需判断该 bit 位是否为 1 即可。40 亿个 32 位int 大约 16GB，而使用位图算法，大约只需 500MB，可以在内存中判断。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
